$date
	Sun Aug 13 14:14:51 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module router_top_tb $end
$var event 1 ! e2 $end
$var event 1 " e1 $end
$var wire 1 # vld_out_2 $end
$var wire 1 $ vld_out_1 $end
$var wire 1 % vld_out_0 $end
$var wire 1 & err $end
$var wire 8 ' data_out_2 [7:0] $end
$var wire 8 ( data_out_1 [7:0] $end
$var wire 8 ) data_out_0 [7:0] $end
$var wire 1 * busy $end
$var parameter 32 + T $end
$var reg 1 , clock $end
$var reg 8 - data_in [7:0] $end
$var reg 1 . pkt_valid $end
$var reg 1 / read_enb_0 $end
$var reg 1 0 read_enb_1 $end
$var reg 1 1 read_enb_2 $end
$var reg 1 2 resetn $end
$scope module DUT $end
$var wire 1 , clock $end
$var wire 8 3 data_in [7:0] $end
$var wire 1 . pkt_valid $end
$var wire 1 / read_enb_0 $end
$var wire 1 0 read_enb_1 $end
$var wire 1 1 read_enb_2 $end
$var wire 1 2 resetn $end
$var wire 1 4 write_enb_reg $end
$var wire 3 5 write_enb [2:0] $end
$var wire 1 # vld_out_2 $end
$var wire 1 $ vld_out_1 $end
$var wire 1 % vld_out_0 $end
$var wire 1 6 soft_reset_2 $end
$var wire 1 7 soft_reset_1 $end
$var wire 1 8 soft_reset_0 $end
$var wire 1 9 rst_int_reg $end
$var wire 1 : parity_done $end
$var wire 1 ; low_pkt_valid $end
$var wire 1 < lfd_state $end
$var wire 1 = ld_state $end
$var wire 1 > laf_state $end
$var wire 1 ? full_state $end
$var wire 1 @ full_2 $end
$var wire 1 A full_1 $end
$var wire 1 B full_0 $end
$var wire 1 C fifo_full $end
$var wire 1 & err $end
$var wire 1 D empty_2 $end
$var wire 1 E empty_1 $end
$var wire 1 F empty_0 $end
$var wire 8 G dout [7:0] $end
$var wire 1 H detect_add $end
$var wire 8 I data_out_2 [7:0] $end
$var wire 8 J data_out_1 [7:0] $end
$var wire 8 K data_out_0 [7:0] $end
$var wire 1 * busy $end
$scope module FIFO_0 $end
$var wire 1 , clock $end
$var wire 1 / read_enb $end
$var wire 1 2 resetn $end
$var wire 1 L write_enb $end
$var wire 1 8 soft_reset $end
$var wire 1 < lfd_state $end
$var wire 1 B full $end
$var wire 1 F empty $end
$var wire 8 M data_in [7:0] $end
$var reg 8 N data_out [7:0] $end
$var reg 7 O fifo_counter [6:0] $end
$var reg 1 P lfd_tmp $end
$var reg 5 Q rd_ptr [4:0] $end
$var reg 5 R wr_ptr [4:0] $end
$var integer 32 S i [31:0] $end
$upscope $end
$scope module FIFO_1 $end
$var wire 1 , clock $end
$var wire 1 0 read_enb $end
$var wire 1 2 resetn $end
$var wire 1 T write_enb $end
$var wire 1 7 soft_reset $end
$var wire 1 < lfd_state $end
$var wire 1 A full $end
$var wire 1 E empty $end
$var wire 8 U data_in [7:0] $end
$var reg 8 V data_out [7:0] $end
$var reg 7 W fifo_counter [6:0] $end
$var reg 1 X lfd_tmp $end
$var reg 5 Y rd_ptr [4:0] $end
$var reg 5 Z wr_ptr [4:0] $end
$var integer 32 [ i [31:0] $end
$upscope $end
$scope module FIFO_2 $end
$var wire 1 , clock $end
$var wire 1 1 read_enb $end
$var wire 1 2 resetn $end
$var wire 1 \ write_enb $end
$var wire 1 6 soft_reset $end
$var wire 1 < lfd_state $end
$var wire 1 @ full $end
$var wire 1 D empty $end
$var wire 8 ] data_in [7:0] $end
$var reg 8 ^ data_out [7:0] $end
$var reg 7 _ fifo_counter [6:0] $end
$var reg 1 ` lfd_tmp $end
$var reg 5 a rd_ptr [4:0] $end
$var reg 5 b wr_ptr [4:0] $end
$var integer 32 c i [31:0] $end
$upscope $end
$scope module FSM $end
$var wire 1 , clock $end
$var wire 2 d data_in [1:0] $end
$var wire 1 F fifo_empty_0 $end
$var wire 1 E fifo_empty_1 $end
$var wire 1 D fifo_empty_2 $end
$var wire 1 . pkt_valid $end
$var wire 1 2 resetn $end
$var wire 1 4 write_enb_reg $end
$var wire 1 6 soft_reset_2 $end
$var wire 1 7 soft_reset_1 $end
$var wire 1 8 soft_reset_0 $end
$var wire 1 9 rst_int_reg $end
$var wire 1 : parity_done $end
$var wire 1 ; low_pkt_valid $end
$var wire 1 < lfd_state $end
$var wire 1 = ld_state $end
$var wire 1 > laf_state $end
$var wire 1 ? full_state $end
$var wire 1 C fifo_full $end
$var wire 1 H detect_add $end
$var wire 1 * busy $end
$var parameter 3 e CHECK_PARITY_ERROR $end
$var parameter 3 f DECODE_ADDRESS $end
$var parameter 3 g FIFO_FULL_STATE $end
$var parameter 3 h LOAD_AFTER_FULL $end
$var parameter 3 i LOAD_DATA $end
$var parameter 3 j LOAD_FIRST_DATA $end
$var parameter 3 k LOAD_PARITY $end
$var parameter 3 l WAIT_TILL_EMPTY $end
$var reg 2 m addr [1:0] $end
$var reg 3 n next_state [2:0] $end
$var reg 3 o present_state [2:0] $end
$upscope $end
$scope module Register $end
$var wire 1 , clock $end
$var wire 8 p data_in [7:0] $end
$var wire 1 H detect_add $end
$var wire 1 ? full_state $end
$var wire 1 > laf_state $end
$var wire 1 = ld_state $end
$var wire 1 < lfd_state $end
$var wire 1 . pkt_valid $end
$var wire 1 2 resetn $end
$var wire 1 9 rst_int_reg $end
$var wire 1 C fifo_full $end
$var reg 8 q dout [7:0] $end
$var reg 1 & err $end
$var reg 8 r fifo_full_state_byte [7:0] $end
$var reg 8 s header_byte [7:0] $end
$var reg 8 t internal_parity [7:0] $end
$var reg 1 ; low_pkt_valid $end
$var reg 8 u packet_parity [7:0] $end
$var reg 1 : parity_done $end
$upscope $end
$scope module Synchronizer $end
$var wire 1 , clock $end
$var wire 2 v data_in [1:0] $end
$var wire 1 H detect_add $end
$var wire 1 F empty_0 $end
$var wire 1 E empty_1 $end
$var wire 1 D empty_2 $end
$var wire 1 B full_0 $end
$var wire 1 A full_1 $end
$var wire 1 @ full_2 $end
$var wire 1 / read_enb_0 $end
$var wire 1 0 read_enb_1 $end
$var wire 1 1 read_enb_2 $end
$var wire 1 2 resetn $end
$var wire 1 % vld_out_0 $end
$var wire 1 $ vld_out_1 $end
$var wire 1 # vld_out_2 $end
$var wire 1 4 write_enb_reg $end
$var reg 2 w fifo_addr [1:0] $end
$var reg 1 C fifo_full $end
$var reg 1 8 soft_reset_0 $end
$var reg 1 7 soft_reset_1 $end
$var reg 1 6 soft_reset_2 $end
$var reg 5 x timer_0 [4:0] $end
$var reg 5 y timer_1 [4:0] $end
$var reg 5 z timer_2 [4:0] $end
$var reg 3 { write_enb [2:0] $end
$upscope $end
$upscope $end
$scope task initialize $end
$upscope $end
$scope task payload_14_15 $end
$var reg 2 | a1 [1:0] $end
$var reg 2 } addr [1:0] $end
$var reg 6 ~ d1 [5:0] $end
$var reg 8 !" header [7:0] $end
$var reg 8 "" parity [7:0] $end
$var reg 8 #" payload [7:0] $end
$var reg 6 $" payload_len [5:0] $end
$var integer 32 %" i [31:0] $end
$upscope $end
$scope task payload_16_17 $end
$var reg 2 &" a2 [1:0] $end
$var reg 2 '" addr [1:0] $end
$var reg 6 (" d2 [5:0] $end
$var reg 8 )" header [7:0] $end
$var reg 8 *" parity [7:0] $end
$var reg 8 +" payload [7:0] $end
$var reg 6 ," payload_len [5:0] $end
$var integer 32 -" i [31:0] $end
$upscope $end
$scope task random_packet $end
$var reg 2 ." a3 [1:0] $end
$var reg 2 /" addr [1:0] $end
$var reg 6 0" d3 [5:0] $end
$var reg 8 1" header [7:0] $end
$var reg 8 2" parity [7:0] $end
$var reg 8 3" payload [7:0] $end
$var reg 6 4" payload_len [5:0] $end
$var integer 32 5" i [31:0] $end
$upscope $end
$scope task reset_ip $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b111 l
b101 k
b1 j
b10 i
b100 h
b11 g
b0 f
b110 e
b1010 +
$end
#0
$dumpvars
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
b0 {
bx z
bx y
bx x
bx w
b0 v
bx u
bx t
bx s
bx r
bx q
b0 p
bx o
b0 n
bx m
b0 d
bx c
bx b
bx a
x`
bx _
bx ^
bx ]
0\
bx [
bx Z
bx Y
xX
bx W
bx V
bx U
0T
bx S
bx R
bx Q
xP
bx O
bx N
bx M
0L
bx K
bx J
bx I
xH
bx G
xF
xE
xD
0C
xB
xA
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
b0 5
x4
b0 3
12
01
00
0/
0.
b0 -
0,
x*
bx )
bx (
bx '
x&
x%
x$
x#
1"
1!
$end
#5
04
0*
1H
0=
0<
0>
0?
09
b0 o
08
07
06
0&
1,
#10
02
0,
#15
0@
0A
0B
0#
0$
0%
1D
1E
1F
b0 '
b0 I
b0 ^
b0 _
b0 a
b0 b
0`
b0 (
b0 J
b0 V
b0 W
b0 Y
b0 Z
0X
b0 )
b0 K
b0 N
b0 O
b0 Q
b0 R
0P
b0 u
b0 t
0;
0:
b0 G
b0 M
b0 U
b0 ]
b0 q
b0 r
b0 s
b0 z
b0 y
b0 x
b0 w
b0 m
b10000 c
b10000 [
b10000 S
1,
#20
12
0,
#25
bz )
bz K
bz N
bz (
bz J
bz V
bz '
bz I
bz ^
1,
#30
0,
#35
1,
#40
b0 |
b10001 ~
0,
#45
1,
#50
0,
#55
1,
#60
b1 n
b1000100 -
b1000100 3
b1000100 p
1.
b1000100 !"
b0 }
b10001 $"
b1000100 ""
0,
#65
1*
b10 n
0H
1<
b1 o
b1000100 s
1,
#70
0,
#75
1L
b1 5
b1 {
b0 %"
14
0*
b10 n
1=
0<
1`
1X
1P
b1000100 t
b1000100 G
b1000100 M
b1000100 U
b1000100 ]
b1000100 q
b10 o
1,
#80
b1 %"
b0 -
b0 3
b0 p
b0 #"
0,
#85
1%
b10 n
0F
b0 G
b0 M
b0 U
b0 ]
b0 q
0P
b1 R
0X
0`
1,
#90
b10 n
b1 d
b1 v
b10 %"
b1 -
b1 3
b1 p
b1000101 ""
b1 #"
0,
#95
b10 R
b1000101 t
b1 G
b1 M
b1 U
b1 ]
b1 q
b1 x
1,
#100
b10 n
b10 d
b10 v
b11 %"
b10 -
b10 3
b10 p
b1000111 ""
b10 #"
0,
#105
b10 x
b10 G
b10 M
b10 U
b10 ]
b10 q
b1000111 t
b11 R
1,
#110
b10 n
b11 d
b11 v
b100 %"
b11 -
b11 3
b11 p
b1000100 ""
b11 #"
0,
#115
b100 R
b1000100 t
b11 G
b11 M
b11 U
b11 ]
b11 q
b11 x
1,
#120
b10 n
b0 d
b0 v
b101 %"
b100 -
b100 3
b100 p
b1000000 ""
b100 #"
0,
#125
b100 x
b100 G
b100 M
b100 U
b100 ]
b100 q
b1000000 t
b101 R
1,
#130
b10 n
b1 d
b1 v
b110 %"
b101 -
b101 3
b101 p
b1000101 ""
b101 #"
0,
#135
b110 R
b1000101 t
b101 G
b101 M
b101 U
b101 ]
b101 q
b101 x
1,
#140
b10 n
b10 d
b10 v
b111 %"
b110 -
b110 3
b110 p
b1000011 ""
b110 #"
0,
#145
b110 x
b110 G
b110 M
b110 U
b110 ]
b110 q
b1000011 t
b111 R
1,
#150
b10 n
b11 d
b11 v
b1000 %"
b111 -
b111 3
b111 p
b1000100 ""
b111 #"
0,
#155
b1000 R
b1000100 t
b111 G
b111 M
b111 U
b111 ]
b111 q
b111 x
1,
#160
b10 n
b0 d
b0 v
b1001 %"
b1000 -
b1000 3
b1000 p
b1001100 ""
b1000 #"
0,
#165
b1000 x
b1000 G
b1000 M
b1000 U
b1000 ]
b1000 q
b1001100 t
b1001 R
1,
#170
b10 n
b1 d
b1 v
b1010 %"
b1001 -
b1001 3
b1001 p
b1000101 ""
b1001 #"
0,
#175
b1010 R
b1000101 t
b1001 G
b1001 M
b1001 U
b1001 ]
b1001 q
b1001 x
1,
#180
b10 n
b10 d
b10 v
b1011 %"
b1010 -
b1010 3
b1010 p
b1001111 ""
b1010 #"
0,
#185
b1010 x
b1010 G
b1010 M
b1010 U
b1010 ]
b1010 q
b1001111 t
b1011 R
1,
#190
b10 n
b11 d
b11 v
b1100 %"
b1011 -
b1011 3
b1011 p
b1000100 ""
b1011 #"
0,
#195
b1100 R
b1000100 t
b1011 G
b1011 M
b1011 U
b1011 ]
b1011 q
b1011 x
1,
#200
b10 n
b0 d
b0 v
b1101 %"
b1100 -
b1100 3
b1100 p
b1001000 ""
b1100 #"
0,
#205
b1100 x
b1100 G
b1100 M
b1100 U
b1100 ]
b1100 q
b1001000 t
b1101 R
1,
#210
b10 n
b1 d
b1 v
b1110 %"
b1101 -
b1101 3
b1101 p
b1000101 ""
b1101 #"
0,
#215
b1110 R
b1000101 t
b1101 G
b1101 M
b1101 U
b1101 ]
b1101 q
b1101 x
1,
#220
b10 n
b10 d
b10 v
b1111 %"
b1110 -
b1110 3
b1110 p
b1001011 ""
b1110 #"
0,
#225
b1110 x
b1110 G
b1110 M
b1110 U
b1110 ]
b1110 q
b1001011 t
b1111 R
1,
#230
b10 n
b11 d
b11 v
b10000 %"
b1111 -
b1111 3
b1111 p
b1000100 ""
b1111 #"
0,
#235
b11 n
1C
1B
b10000 R
b1000100 t
b1111 G
b1111 M
b1111 U
b1111 ]
b1111 q
b1111 x
1,
#240
b11 n
b0 d
b0 v
b10001 %"
b10000 -
b10000 3
b10000 p
b1010100 ""
b10000 #"
0,
#245
0L
b0 5
b0 {
04
1*
b11 n
0=
1?
b11 o
b10000 x
b10000 r
b1010100 t
1,
#250
b11 n
b1010100 -
b1010100 3
b1010100 p
0.
0,
#255
b10001 x
1,
#260
0,
#265
b10010 x
1,
#270
1/
0,
#275
b100 n
0C
0B
b1000100 )
b1000100 K
b1000100 N
b10010 O
b1 Q
b0 x
1,
#280
0,
#285
1L
b1 5
b1 {
14
b10 n
1>
0?
b100 o
b10 Q
b10001 O
b0 )
b0 K
b0 N
1,
#290
0,
#295
0*
b101 n
1=
0>
b1 )
b1 K
b1 N
b10000 O
b11 Q
b10001 R
b10000 G
b10000 M
b10000 U
b10000 ]
b10000 q
b10 o
1,
#300
0,
#305
1*
0=
b110 n
b101 o
b1010100 G
b1010100 M
b1010100 U
b1010100 ]
b1010100 q
1:
1;
b1010100 u
b100 Q
b10010 R
b1111 O
b10 )
b10 K
b10 N
1,
#310
0,
#315
0L
b0 5
b0 {
04
b0 n
19
b11 )
b11 K
b11 N
b1110 O
b101 Q
b10011 R
b110 o
1,
#320
0,
#325
0*
1H
09
b0 o
0;
b110 Q
b1101 O
b100 )
b100 K
b100 N
1,
#330
0,
#335
b101 )
b101 K
b101 N
b1100 O
b111 Q
b0 t
0:
1,
#340
0,
#345
b1000 Q
b1011 O
b110 )
b110 K
b110 N
1,
#350
0,
#355
b111 )
b111 K
b111 N
b1010 O
b1001 Q
1,
#360
0,
#365
b1010 Q
b1001 O
b1000 )
b1000 K
b1000 N
1,
#370
0,
#375
b1001 )
b1001 K
b1001 N
b1000 O
b1011 Q
1,
#380
0,
#385
b1100 Q
b111 O
b1010 )
b1010 K
b1010 N
1,
#390
0,
#395
b1011 )
b1011 K
b1011 N
b110 O
b1101 Q
1,
#400
0,
#405
b1110 Q
b101 O
b1100 )
b1100 K
b1100 N
1,
#410
0,
#415
b1101 )
b1101 K
b1101 N
b100 O
b1111 Q
1,
#420
0,
#425
b10000 Q
b11 O
b1110 )
b1110 K
b1110 N
1,
#430
0,
#435
b1111 )
b1111 K
b1111 N
b10 O
b10001 Q
1,
#440
0,
#445
b10010 Q
b1 O
b10000 )
b10000 K
b10000 N
1,
#450
0,
#455
0%
1F
b1010100 )
b1010100 K
b1010100 N
b0 O
b10011 Q
1,
#460
0/
0,
#465
bz )
bz K
bz N
1,
#470
0,
#475
1,
#480
0,
#485
1,
#490
0,
#495
1,
#500
0,
#505
1,
#510
0,
#515
1,
#520
0,
#525
1,
#530
0,
#535
1,
#540
0,
#545
1,
#550
0,
#555
1,
#560
0,
